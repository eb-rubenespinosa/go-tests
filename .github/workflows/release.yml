on: 
  release:
    types:
      - published

name: Build and Release
jobs:
  build:
    name: Build
    strategy:
      matrix:
        go-version: [1.11.x]
        platform: [macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Semver Tag
      run: |
        if [[ ${{ github.event.release.tag_name }} =~ ^[0-9]+\.[0-9]+\.[0-9]+(-(0|[1-9]\d*|(beta|alpha).*))?$ ]]; then
            echo "Semver correct"
        else
            echo "Semver incorrect"
            exit 1
        fi
    - name: Install Go
      if: success()
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go-version }}
    - name: Setup env
      run: |
        echo "::set-env name=GOPATH::$(go env GOPATH)"
        echo "::set-env name=GOBIN::$(go env GOPATH)/bin"
        echo "::add-path::$(go env GOPATH)/bin"
      shell: bash
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Create go path
      run: |
        mkdir -p $GOPATH/pkg
        mkdir -p $GOBIN
        mkdir -p $GOPATH/src/github.com/$GITHUB_REPOSITORY
        mv ./* $GOPATH/src/github.com/$GITHUB_REPOSITORY
    - name: Make build
      run: |
        cd $GOPATH/src/github.com/$GITHUB_REPOSITORY
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure  
        fi
        go build
    - name: Upload Artifacts
      run: |
        cd $GOPATH/src/github.com/$GITHUB_REPOSITORY
        tar czf tmp.tar.gz go-tests
        SHA_256=`shasum -a 256 tmp.tar.gz | awk '{printf $1}'`
        if [ "${{ matrix.platform }}" == "macos-latest" ]; then
          export PLATFORM="darwin-amd64"  
        elif [ "${{ matrix.platform }}" == "ubuntu-latest"  ]; then
          export PLATFORM="linux-amd64"  
        fi
        asset_url=$(curl \
          -X POST \
          --data-binary @tmp.tar.gz \
          -H 'Content-Type: multipart/form-data' \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}/assets?name=yak-$PLATFORM-${{ github.event.release.tag_name }}.tar.gz&label=$PLATFORM" | jq -r '.id')
          echo $asset_url > ${{github.workspace}}/${{ matrix.platform }}.txt
          echo $SHA_256 >> ${{github.workspace}}/${{ matrix.platform }}.txt
          cat ${{github.workspace}}/${{ matrix.platform }}.txt
    - name: Upload math result for job 2
      uses: actions/upload-artifact@v1
      with:
        name: assets
        path: ${{ matrix.platform }}.txt
  publish:
    name: Publish files in master
    needs: [build]
    runs-on: [macos-latest]
    if: github.event.release.prerelease == false
    steps:
    - name: Download math result for job 2
      uses: actions/download-artifact@v1
      with:
        name: assets
    - name: Modify brew and changelog
      run: |
        git init
        git remote add origin https://${{github.actor}}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git pull https://${{github.actor}}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        export LINUX_ASSET_ID=`sed -n 1p assets/ubuntu-latest.txt`
        export MAC_ASSET_ID=`sed -n 1p assets/macos-latest.txt`
        export MAC_ASSET_SHA_256=`sed -n 2p assets/macos-latest.txt`

        if [ -z $LINUX_ASSET_ID ]; then
            echo "Error: Invalid linux asset id: $LINUX_ASSET_ID"
            exit 1
        fi
        if grep -w ${{ github.event.release.tag_name }} CHANGELOG.md; then
            echo "Error: ${{ github.event.release.tag_name }} already released, found a changelog entry for it."
            exit 1
        fi

        DATE=`date +%Y-%m-%d`
        cat >>CHANGELOG.md <<EOL

        ## ${{ github.event.release.tag_name }} ($DATE)
        ${{ github.event.release.body }}
        EOL

        sed -i -e 's/assets\/[0-9][0-9]* /assets\/'"$LINUX_ASSET_ID"' /g' README.md

        git add CHANGELOG.md README.md
        git commit -m "Release ${{ github.event.release.tag_name }}"
        git push --set-upstream origin master

        curl -X POST https://api.github.com/repos/eb-rubenespinosa/brew_test/dispatches \
          -H 'Accept: application/vnd.github.everest-preview+json' \
          -H "Authorization: token ${{secrets.PAT_TOKEN}}" \
          --data '{"event_type": "vault_aws_iam_auth_release", "client_payload": { "version": "'${{ github.event.release.tag_name }}'", "mac_sha": "'$MAC_ASSET_SHA_256'", "asset_id": "'$MAC_ASSET_ID'" }}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: ${{ github.event.release.tag_name }}
  publish_beta:
    name: Publish beta files in master
    needs: [build]
    runs-on: [macos-latest]
    if: github.event.release.prerelease == true
    steps:
    - name: Download math result for job 2
      uses: actions/download-artifact@v1
      with:
        name: assets
    - name: Modify brew and changelog
      run: |
        git init
        git remote add origin https://${{github.actor}}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git pull https://${{github.actor}}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        export MAC_ASSET_ID=`sed -n 1p assets/macos-latest.txt`
        export MAC_ASSET_SHA_256=`sed -n 2p assets/macos-latest.txt`
        chmod +x release_beta.sh
        ./release_beta.sh
        
        git add yak@0-beta.rb
        git commit -m "Pre-release $VERSION"
        git push --set-upstream origin master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: ${{ github.event.release.tag_name }}
        CHANGELOG: ${{ github.event.release.body }}
