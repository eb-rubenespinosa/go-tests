on: 
  release:
    types:
      - created

name: Build and Release
jobs:
  build:
    name: Build
    strategy:
      matrix:
        go-version: [1.11.x]
        platform: [macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install Go
      if: success()
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go-version }}
    - name: Setup env
      run: |
        echo "::set-env name=GOPATH::$(go env GOPATH)"
        echo "::set-env name=GOBIN::$(go env GOPATH)/bin"
        echo "::add-path::$(go env GOPATH)/bin"
      shell: bash
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Create go path
      run: |
        mkdir -p $GOPATH/pkg
        mkdir -p $GOBIN
        mkdir -p $GOPATH/src/github.com/$GITHUB_REPOSITORY
        mv ./* $GOPATH/src/github.com/$GITHUB_REPOSITORY
    - name: Make build
      run: |
        cd $GOPATH/src/github.com/$GITHUB_REPOSITORY
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure  
        fi
        go build
    - name: Make build
      run: |
        cd $GOPATH/src/github.com/$GITHUB_REPOSITORY
        tar czf tmp.tar.gz go-tests

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: $GOPATH/src/github.com/$GITHUB_REPOSITORY/tmp.tar.gz
        asset_name: yak-${{ matrix.platform }}-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip
